{"ast":null,"code":"import _asyncToGenerator from \"/Users/medwin.mirza/Documents/Initiatives/partyclick/partyclick-frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ImageKitService {\n  constructor(http) {\n    this.http = http;\n    this.backendUrl = 'http://localhost:3000/upload'; // Your backend URL\n  }\n  uploadPhoto(photoDataUrl, fileName) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      try {\n        // Convert Data URL to base64 string (remove prefix)\n        const base64 = photoDataUrl.split(',')[1];\n        const response = yield _this.http.post(_this.backendUrl, {\n          file: base64,\n          fileName\n        }).toPromise();\n        return response.url; // ImageKit URL\n      } catch (error) {\n        console.error('Error uploading photo:', error);\n        throw error;\n      }\n    })();\n  }\n  uploadMultiplePhotos(photos) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      const uploadPromises = photos.map((photo, index) => {\n        if (photo) {\n          const fileName = `guest-photo-${Date.now()}-${index}.jpg`;\n          return _this2.uploadPhoto(photo, fileName);\n        }\n        return Promise.resolve('');\n      });\n      try {\n        const urls = yield Promise.all(uploadPromises);\n        return urls.filter(url => url !== '');\n      } catch (error) {\n        console.error('Error uploading multiple photos:', error);\n        throw error;\n      }\n    })();\n  }\n  static {\n    this.ɵfac = function ImageKitService_Factory(t) {\n      return new (t || ImageKitService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ImageKitService,\n      factory: ImageKitService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["ImageKitService","constructor","http","backendUrl","uploadPhoto","photoDataUrl","fileName","_this","_asyncToGenerator","base64","split","response","post","file","toPromise","url","error","console","uploadMultiplePhotos","photos","_this2","uploadPromises","map","photo","index","Date","now","Promise","resolve","urls","all","filter","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["/Users/medwin.mirza/Documents/Initiatives/partyclick/partyclick-frontend/src/app/imagekit-public.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ImageKitService {\n  private backendUrl = 'http://localhost:3000/upload'; // Your backend URL\n\n  constructor(private http: HttpClient) {}\n\n  async uploadPhoto(photoDataUrl: string, fileName: string): Promise<string> {\n    try {\n      // Convert Data URL to base64 string (remove prefix)\n      const base64 = photoDataUrl.split(',')[1];\n\n      const response: any = await this.http.post(this.backendUrl, {\n        file: base64,\n        fileName\n      }).toPromise();\n\n      return response.url; // ImageKit URL\n    } catch (error) {\n      console.error('Error uploading photo:', error);\n      throw error;\n    }\n  }\n\n  async uploadMultiplePhotos(photos: string[]): Promise<string[]> {\n    const uploadPromises = photos.map((photo, index) => {\n      if (photo) {\n        const fileName = `guest-photo-${Date.now()}-${index}.jpg`;\n        return this.uploadPhoto(photo, fileName);\n      }\n      return Promise.resolve('');\n    });\n\n    try {\n      const urls = await Promise.all(uploadPromises);\n      return urls.filter(url => url !== '');\n    } catch (error) {\n      console.error('Error uploading multiple photos:', error);\n      throw error;\n    }\n  }\n}\n"],"mappings":";;;AAMA,OAAM,MAAOA,eAAe;EAG1BC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFhB,KAAAC,UAAU,GAAG,8BAA8B,CAAC,CAAC;EAEd;EAEjCC,WAAWA,CAACC,YAAoB,EAAEC,QAAgB;IAAA,IAAAC,KAAA;IAAA,OAAAC,iBAAA;MACtD,IAAI;QACF;QACA,MAAMC,MAAM,GAAGJ,YAAY,CAACK,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QAEzC,MAAMC,QAAQ,SAAcJ,KAAI,CAACL,IAAI,CAACU,IAAI,CAACL,KAAI,CAACJ,UAAU,EAAE;UAC1DU,IAAI,EAAEJ,MAAM;UACZH;SACD,CAAC,CAACQ,SAAS,EAAE;QAEd,OAAOH,QAAQ,CAACI,GAAG,CAAC,CAAC;OACtB,CAAC,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;QAC9C,MAAMA,KAAK;;IACZ;EACH;EAEME,oBAAoBA,CAACC,MAAgB;IAAA,IAAAC,MAAA;IAAA,OAAAZ,iBAAA;MACzC,MAAMa,cAAc,GAAGF,MAAM,CAACG,GAAG,CAAC,CAACC,KAAK,EAAEC,KAAK,KAAI;QACjD,IAAID,KAAK,EAAE;UACT,MAAMjB,QAAQ,GAAG,eAAemB,IAAI,CAACC,GAAG,EAAE,IAAIF,KAAK,MAAM;UACzD,OAAOJ,MAAI,CAAChB,WAAW,CAACmB,KAAK,EAAEjB,QAAQ,CAAC;;QAE1C,OAAOqB,OAAO,CAACC,OAAO,CAAC,EAAE,CAAC;MAC5B,CAAC,CAAC;MAEF,IAAI;QACF,MAAMC,IAAI,SAASF,OAAO,CAACG,GAAG,CAACT,cAAc,CAAC;QAC9C,OAAOQ,IAAI,CAACE,MAAM,CAAChB,GAAG,IAAIA,GAAG,KAAK,EAAE,CAAC;OACtC,CAAC,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;QACxD,MAAMA,KAAK;;IACZ;EACH;;;uBAtCWhB,eAAe,EAAAgC,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;EAAA;;;aAAfnC,eAAe;MAAAoC,OAAA,EAAfpC,eAAe,CAAAqC,IAAA;MAAAC,UAAA,EAFd;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}